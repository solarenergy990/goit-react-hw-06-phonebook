{"version":3,"sources":["components/ContactsList/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","components/ContactsList/ContactsLIst.module.css","components/ContactForm/ContactForm.js","components/ContactsList/ContactListItem/ContactListItem.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","redux/app/actions.js","components/App/App.js","redux/app/reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","evt","value","target","currentTarget","reset","className","preventDefault","s","label","labelText","type","pattern","title","required","onChange","input","button","ContactListItem","contactName","contactNumber","onClickRemove","listItem","listText","onClick","ContactsList","contacts","onContactDelete","children","map","contact","id","Filter","defaultProps","appActions","addContact","createAction","text","payload","shortid","generate","deleteContact","setFilter","getVisibleContacts","filter","normalizedFilter","toLowerCase","includes","App","useSelector","state","appState","dispatch","useDispatch","contactId","createReducer","initialContacts","actions","alert","_","combineReducers","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","appReducer","storeItems","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.46f2bb61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactListItem_listItem__1ox0a\",\"listText\":\"ContactListItem_listText__17ifg\",\"button\":\"ContactListItem_button__2oLKC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__xF42X\",\"input\":\"Filter_input__2p85s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactsLIst_contacts__3BCU6\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport s from './ContactForm.module.css';\n\nconst ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = evt => {\n    const { value } = evt.target;\n\n    if (evt.currentTarget.name === 'name') {\n      setName(value);\n    }\n    if (evt.currentTarget.name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    onSubmit({ name, number });\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <div className=\"form-container\">\n          <label className={s.label}>\n            <p className={s.labelText}>Name</p>\n            <input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              onChange={handleChange}\n              value={name}\n              className={s.input}\n            />\n          </label>\n          <label className={s.label}>\n            <p className={s.labelText}>Number</p>\n            <input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n              onChange={handleChange}\n              value={number}\n              className={s.input}\n            />\n          </label>\n          <button type=\"submit\" className={s.button}>\n            Add contact\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactListItem.module.css';\n\nconst ContactListItem = ({ contactName, contactNumber, onClickRemove }) => {\n  return (\n    <li className={s.listItem}>\n      <p className={s.listText}>\n        {contactName} : {contactNumber}\n      </p>\n      <button type=\"button\" className={s.button} onClick={onClickRemove}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n  contactName: PropTypes.string.isRequired,\n  contactNumber: PropTypes.string.isRequired,\n  onClickRemove: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactListItem from '../ContactsList/ContactListItem/ContactListItem';\nimport s from './ContactsLIst.module.css';\n\nconst ContactsList = ({ contacts, onContactDelete, children }) => {\n  // console.log(onContactDelete);\n  return (\n    <div className={s.contacts}>\n      {children}\n      <ul>\n        {contacts.map(contact => {\n          const { id, name, number } = contact;\n\n          return (\n            <ContactListItem\n              key={id}\n              contactName={name}\n              contactNumber={number}\n              onClickRemove={() => onContactDelete(id)}\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onContactDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n  // console.log(onChange);\n  // console.log(value);\n  return (\n    <label>\n      <p className={s.label}>Find contacts by name</p>\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={evt => onChange(evt.currentTarget.value)}\n      ></input>\n    </label>\n  );\n};\n\nexport default Filter;\n\nFilter.defaultProps = {\n  value: '',\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n","import { createAction } from '@reduxjs/toolkit';\nimport shortid from 'shortid';\n// import actionTypes from './types';\n\nconst addContact = createAction('app/addContact', text => {\n  const { name, number } = text;\n\n  return {\n    payload: {\n      id: shortid.generate(),\n      name,\n      number,\n    },\n  };\n});\n\nconst deleteContact = createAction('app/deleteContact', text => {\n  return {\n    payload: { id: text },\n  };\n});\n\nconst setFilter = createAction('app/setFilter');\n\n// const addContact = value => {\n//   const { name, number } = value;\n\n//   return {\n//     type: actionTypes.ADD_CONTACT,\n//     payload: {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     },\n//   };\n// };\n\n// const deleteContact = contactId => {\n//   // console.log(value);\n//   return { type: actionTypes.DELETE_CONTACT, payload: { id: contactId } };\n// };\n\n// const setFilter = value => {\n//   // console.log('setFilter:', value);\n//   return {\n//     type: actionTypes.SET_FILTER,\n//     payload: value,\n//   };\n// };\n\nconst appActions = {\n  addContact,\n  deleteContact,\n  setFilter,\n};\n\nexport default appActions;\n","import React from 'react';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactsList from '../ContactsList/ContactsList';\nimport Filter from '../Filter/Filter';\n\n// import { connect } from 'react-redux'\nimport { useSelector, useDispatch } from 'react-redux';\nimport appActions from '../../redux/app/actions';\n\nconst App = () =>\n  // {\n  //   // contacts,\n  //   // filter,\n  //   // onHandleSubmit,\n  //   // onDeleteContact,\n  //   // onChangeFilter,\n  // },\n  {\n    const contacts = useSelector(state => state.appState.contacts);\n    const filter = useSelector(state => state.appState.filter);\n    const dispatch = useDispatch();\n\n    const onHandleSubmit = contact => dispatch(appActions.addContact(contact));\n    const onDeleteContact = contactId =>\n      dispatch(appActions.deleteContact(contactId));\n    const onChangeFilter = value => dispatch(appActions.setFilter(value));\n\n    return (\n      <div>\n        <h2>Phonebook</h2>\n        <ContactForm onSubmit={onHandleSubmit} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={onChangeFilter} />\n        <ContactsList\n          contacts={getVisibleContacts(contacts, filter)}\n          onContactDelete={onDeleteContact}\n        />\n      </div>\n    );\n  };\n\nconst getVisibleContacts = (contacts, filter) => {\n  if (!filter) {\n    return contacts;\n  }\n\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\n// const mapStateToProps = state => {\n//   return {\n//     contacts: state.appState.contacts,\n//     filter: state.appState.filter,\n//   };\n// };\n\n// const mapDispatchToProps = dispatch => ({\n//   onHandleSubmit: value => dispatch(appActions.addContact(value)),\n//   onDeleteContact: value => dispatch(appActions.deleteContact(value)),\n//   onChangeFilter: value => dispatch(appActions.setFilter(value)),\n// });\n\nexport default App;\n","// import actionTypes from './types';\nimport initialContacts from '../../contacts.json';\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './actions';\n\nconst contacts = createReducer([...initialContacts], {\n  [actions.addContact]: (state, { payload }) => {\n    const checkedContactNames = state.map(contact => {\n      return contact.name.toLowerCase();\n    });\n    if (!checkedContactNames.includes(payload.name.toLowerCase())) {\n      return [...state, payload];\n    } else {\n      alert(`${payload.name} is already in contacts`);\n      return state;\n    }\n  },\n  [actions.deleteContact]: (state, { payload }) => {\n    return state.filter(contact => contact.id !== payload.id);\n  },\n});\n\nconst filter = createReducer('', {\n  [actions.setFilter]: (_, { payload }) => {\n    return payload;\n  },\n});\n\n// const contacts = (state = [...initialContacts], { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.ADD_CONTACT: {\n//       const checkedContactNames = state.map(contact => {\n//         return contact.name.toLowerCase();\n//       });\n//       if (!checkedContactNames.includes(payload.name.toLowerCase())) {\n//         return [...state, payload];\n//       } else {\n//         alert(`${payload.name} is already in contacts`);\n//         return state;\n//       }\n//     }\n\n//     case actionTypes.DELETE_CONTACT: {\n//       return state.filter(contact => contact.id !== payload.id);\n//     }\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.SET_FILTER: {\n//       return payload;\n//     }\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({ contacts, filter });\n","// import { createStore, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport appReducer from './app/reducer';\n\nconst persistConfig = {\n  key: 'appState',\n  storage,\n  blacklist: ['filter'],\n};\n\n// const rootReducer = combineReducers({\n//   appState: appReducer,\n// });\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: { appState: persistReducer(persistConfig, appReducer) },\n  middleware,\n});\n\n// const store = createStore(persistedReducer, composeWithDevTools());\n\nconst persistor = persistStore(store);\n\nconst storeItems = {\n  store,\n  persistor,\n};\n\nexport default storeItems;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './components/App/App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__27LpJ\",\"labelText\":\"ContactForm_labelText__2mOUZ\",\"input\":\"ContactForm_input__mXrtS\",\"button\":\"ContactForm_button__KdG7N\"};"],"sourceRoot":""}